# Linux Git 서버 세팅 

1. 
sudo useradd -d /DATA/git -m -c "Git" -s /bin/bash git 명령어 후 
git passwd 세팅 

2. git global 설정 
git config --global user.name "bigd2"
git config --global user.email "bigd2@example.com"

3. git repository 생성
su - git 명령어 후 passwd 입력 후
mkdir Repo

4. 프로젝트 생성
cd Repo 후 
mkdir bigd2.git 
cd bigd2.git 
git init --bare       -> --bare는 원격저장소 그냥 git init은 로컬저장소 

ls 확인해보면 여러 디렉토리와 파일들이 생성됨.

5. 이제 윈도우에서 git clone을 통해 Linux의 서버와 연결
git clone ssh://git@[server IP]:/DATA/git/Repo/[Repository명.git] 후
git passwd 입력 

6. git 사용자가 리눅스 쉘 접근 막기
# witch git-shell
# chsh git -s /usr/bin/git-shell
# cat /etc/passwd | grep git
### 

7. ssh키는 사실 등록하지 않아도 사용가능하지만 git 작업시에 서버 패스워드를 매번 입력해야한다.
ssh는 읽기/쓰기 접근을 쉽게 할 수 있는 유일한 네트워크 프로토콜,
다른 네트워크 프로토콜인 HTTP와 Git은 일반적으로 읽기만 가능.
그래서 초보자라고 해도 쓰기 명령을 이용하려면 SSH가 필요. SSH는 또한 인증도 지원한다.
SSH는 보통 유비쿼터스적이면서도 사용 및 설치가 쉽다.
# 장점
1. 누가 리모트에서 저장소에 접근했는지 알 수 있다.
2. 상대적으로 설정 쉬움. SSH 데몬이 흔하기 때문.
   네트워크 관리자들은 SSH데몬을 다루어본 경험이 있고 대부분의 OS 배포판에는 SSH 데몬과
   관리 도구들이 모두 들어 있다.
3. SSH를 통해 접근하면 보안에 안전하다. 모든 데이터들이 암호화되어 인증된 상태로 전송.
4. SSH 전송시 데이터를 가능한 압축하여 전송하므로 효율적

# 단점
1. 익명으로 접근 불가능. 심지어 읽기 전용인 경우에도 시스템 접근할 수 없다.
2) 회사에서만 사용할 것이라면 SSH가 가장 적합한 프로토콜이지만, 오픈소스 프로젝트는 SSH만으로 부족합니다.
만약, 사람들이 프로젝트에 익명으로 접근할 수 있게 하려면, 자신이 PUSH할 때 사용할 SSH를 설치하는 것과 별개로 다른 사람들이 PULL할때 사용할 다른 프로토콜을 추가해야 합니다.


--------------브랜치 사용----------------
# 특정 브랜치만 clone 하기 
## git clone --branch [브랜치이름] ssh://git@[server IP]:/DATA/git/Repo/[Repository명.git]
-> Linux의 프로젝트가 로컬에 복사된 것을 확인할 수 있음 

# git restore . 를 이용해 되돌아갈 수 있음 
# git restore [파일명] 을 통해 특정 파일만 restore 가능 

# git diff --color-words 
# git diff --word-diff
# git diff [파일명]
# 특정 커밋 버전의 내용과 비교하는 방법 -> git diff 27fa75e myfile.txt
# 특정 커밋 버전 두개의 내용을 비교하는 방법 -> git diff 27fa75e ada9b57 myfile.txt
# 특정 커밋 버전과 dev 브랜치의 가장 최신 버전과의 차이점 중에서 src/ 디렉토리 이하의 상대 경로상의 파일들만 비교 -> git diff ada9b57 dev src/

# branch 생성
git branch dev

# branch 확인 
git branch 

# branch의 마지막 커밋 메시지 확인 
git branch -v

# 생성한 브랜치로 이동하기				# 브랜치 생성 후 바로 생성한 브랜치로 이동하기 
git checkout dev 					git checkout -b dev

# 브랜치 삭제
git branch -d dev 

# 일단 20210301에 개발을 해서 나중에 dev에 merge를 시킨 후 master에 merge를 시켜야함 
git checkout dev   
git merge 20210301  
명령어를 통해 dev와 20210301 merge시킨다. 

# git 이전 버전으로 되돌리기 
git reset [commit 버전 아이디]
git revert [commit 버전 아이디] 
reset과 revert의 차이는 revert는 git log의 최근 버전 기록을 유지한채로 돌아가는 것
reset은 git log의 최근 버전 기록을 삭제하면서 돌아가는 것이다. 

# 원격 저장소에 강제 푸쉬
git push -f origin master
